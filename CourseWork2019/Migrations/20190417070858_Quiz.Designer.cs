// <auto-generated />
using System;
using CourseWork2019.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CourseWork2019.Migrations
{
    [DbContext(typeof(QuizContext))]
    [Migration("20190417070858_Quiz")]
    partial class Quiz
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CourseWork2019.Models.Answer", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerText");

                    b.Property<string>("QuestionID");

                    b.Property<int?>("QuestionID1");

                    b.HasKey("AnswerID");

                    b.HasIndex("QuestionID1");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("CourseWork2019.Models.CorrectAnswer", b =>
                {
                    b.Property<int>("CorrectAnswerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerID");

                    b.Property<int>("QuestionID");

                    b.HasKey("CorrectAnswerID");

                    b.HasIndex("AnswerID");

                    b.HasIndex("QuestionID");

                    b.ToTable("CorrectAnswers");
                });

            modelBuilder.Entity("CourseWork2019.Models.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuestionName");

                    b.Property<string>("QuestionText");

                    b.Property<int>("RubricID");

                    b.HasKey("QuestionID");

                    b.HasIndex("RubricID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CourseWork2019.Models.Quiz", b =>
                {
                    b.Property<int>("QuizID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("QuizName");

                    b.HasKey("QuizID");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("CourseWork2019.Models.QuizQuestion", b =>
                {
                    b.Property<int>("QuizQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionID");

                    b.Property<int>("QuizID");

                    b.HasKey("QuizQuestionID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("QuizID");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("CourseWork2019.Models.Rubric", b =>
                {
                    b.Property<int>("RubricID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RubricName");

                    b.HasKey("RubricID");

                    b.ToTable("Rubrics");
                });

            modelBuilder.Entity("CourseWork2019.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstMidName");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CourseWork2019.Models.UserQuiz", b =>
                {
                    b.Property<int>("UserQuizID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuizID");

                    b.Property<int>("UserID");

                    b.HasKey("UserQuizID");

                    b.HasIndex("QuizID");

                    b.HasIndex("UserID");

                    b.ToTable("UserQuiz");
                });

            modelBuilder.Entity("CourseWork2019.Models.Answer", b =>
                {
                    b.HasOne("CourseWork2019.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID1");
                });

            modelBuilder.Entity("CourseWork2019.Models.CorrectAnswer", b =>
                {
                    b.HasOne("CourseWork2019.Models.Answer", "Answer")
                        .WithMany("CorrectAnswers")
                        .HasForeignKey("AnswerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CourseWork2019.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CourseWork2019.Models.Question", b =>
                {
                    b.HasOne("CourseWork2019.Models.Rubric", "Rubric")
                        .WithMany("Questions")
                        .HasForeignKey("RubricID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CourseWork2019.Models.QuizQuestion", b =>
                {
                    b.HasOne("CourseWork2019.Models.Question", "Question")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CourseWork2019.Models.Quiz", "Quiz")
                        .WithMany("QuizQusetions")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CourseWork2019.Models.UserQuiz", b =>
                {
                    b.HasOne("CourseWork2019.Models.Quiz", "Quiz")
                        .WithMany("UserQuizzes")
                        .HasForeignKey("QuizID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CourseWork2019.Models.User", "User")
                        .WithMany("UserQuizzes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
